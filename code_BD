using System;

abstract class Parents
{
    abstract public void Draw();
}
class Player : Parents
{
//new
    //set Player coordinates
    private int x, y;
    public Player(int x = 2, int y = 6)
    {
        this.x = x;
        this.y = y;
    }
    public int X
    {
        get { return x; }
        set { x = value; }
    }
    public int Y
    {
        get { return y;}
        set { y = value; }
    }
    //метод переміщення Player, передаємо словник, у якому зберігається напрямок, змінюємо координати
    public void Move(Parents[,] field, Dictionary<char, Coords> Coords_upd, char direction)
    {
        field[x, y] = new Empty(); //clear the cell after Player
      
        this.x = x + Coords_upd[direction].x;
        this.y = y + Coords_upd[direction].y;
    }
   
    public override void Draw()
    {
        Console.Write('I');
    }
}

class Sand : Parents
{
    public override void Draw()
    {
        Console.Write('.');
    }
}
class Empty : Parents
{
    public override void Draw()
    {
        Console.Write(' ');
    }
}
class Rock : Parents
{
    public override void Draw()
    {
        Console.Write('o');
    }
}
class Dimond : Parents
{
    public override void Draw()
    {
        Console.Write('D');
    }
}
//new
public struct Coords
{
    public int x, y;

    public Coords(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
}

class Program
{
    static void Main(string[] args)
    {
        //Dictionary with directions
        Dictionary<char, Coords> updatedCoords = new Dictionary<char, Coords>();
        updatedCoords.Add('u', new Coords(-1, 0));
        updatedCoords.Add('d', new Coords(1, 0));
        updatedCoords.Add('r', new Coords(0, 1));
        updatedCoords.Add('l', new Coords(0, -1));
        
        Parents[,] field = new Parents[5, 16];

        //filling with sand
        for (int i = 0; i < field.GetLength(0); i++)
        {
            for (int j = 0; j < field.GetLength(1); j++)
            {
                field[i, j] = new Sand();
            }
        }
        //filling with Rock
        for (int i = 1; i < field.GetLength(0) - 1; i++)
        {
            field[i+1, 1] = new Rock();
            field[i, 6] = new Rock();
            field[i-1, 10] = new Rock();
        }

        //filling with Dimond
        for (int i = 0; i < field.GetLength(0); i+= 3)
        {
            for (int j = 0; j < field.GetLength(1); j+= 5)
            {
                field[i, j] = new Dimond();
            }
        }
//new
        Player player = new Player();
        Draw(field);

        //read input
        ConsoleKeyInfo KeyValue;
        KeyValue = Console.ReadKey();

        while (true)
        {
            if (KeyValue.Key == ConsoleKey.UpArrow) player.Move(field, updatedCoords, 'u');
            if (KeyValue.Key == ConsoleKey.DownArrow) player.Move(field, updatedCoords, 'd');
            if (KeyValue.Key == ConsoleKey.LeftArrow) player.Move(field, updatedCoords, 'l');
            if (KeyValue.Key == ConsoleKey.RightArrow) player.Move(field, updatedCoords, 'r');
            
            updatePlayer(field, player, KeyValue);
            KeyValue = Console.ReadKey();

        }
    }
    //renew(update) Player coordinates
    static void updatePlayer(Parents[,] field, Player player, ConsoleKeyInfo key_pressed)
    {
        field[player.X, player.Y] = player;
         
        Draw(field);
    }

    static void Draw(Parents[,] field)
        {
        Console.Clear();
        for (int i = 0; i < field.GetLength(0); i++)
       {
            for (int j = 0; j < field.GetLength(1); j++)
            {
                field[i, j].Draw();
            }
            Console.WriteLine();
        }
        Thread.Sleep(600);
    }
        
    } 
       
